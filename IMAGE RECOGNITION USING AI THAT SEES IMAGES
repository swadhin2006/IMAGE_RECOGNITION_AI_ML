{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMPrXZTpbsYZ5zIi+uyPWdw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/swadhin2006/IMAGE_RECOGNITION_AI_ML/blob/main/IMAGE%20RECOGNITION%20USING%20AI%20THAT%20SEES%20IMAGES\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "pmvQ0uPKpd3n"
      },
      "outputs": [],
      "source": [
        "!pip install -q kaggle\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "id": "6Xv9Myi8pxyk",
        "outputId": "31763561-f076-482d-d428-463ca178d576"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-c900e0fc-b171-435a-ae93-675d396acb4a\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-c900e0fc-b171-435a-ae93-675d396acb4a\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving kaggle.json to kaggle.json\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'kaggle.json': b'{\"username\":\"bswadhinkumar\",\"key\":\"c0fa824bf26c7ca5f8cf6fe179e0b50e\"}'}"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mkdir ~/.kaggle\n",
        "!cp kaggle.json ~/.kaggle/\n",
        "!chmod 600 ~/.kaggle/kaggle.json"
      ],
      "metadata": {
        "id": "JxqtTJKNqB6H"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import kagglehub\n",
        "\n",
        "# Download latest version\n",
        "path = kagglehub.dataset_download(\"hojjatk/mnist-dataset\")\n",
        "\n",
        "print(\"Path to dataset files:\", path)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qVmR_8kfqoJc",
        "outputId": "7246a50d-7a38-4cbb-fb0b-414f1f3198ba"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Path to dataset files: /kaggle/input/mnist-dataset\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "(x_train,y_train),(x_test,y_test) = tf.keras.datasets.mnist.load_data()\n",
        "print(f\"Train shape: {x_train.shape}\")\n",
        "print(f\"Test shape: {x_test.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l24vIEdxsNGq",
        "outputId": "32146536-4d6c-4cc2-925b-976d156db9a3"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
            "Train shape: (60000, 28, 28)\n",
            "Test shape: (10000, 28, 28)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_train=x_train/255.0\n",
        "x_test=x_test/255.0\n",
        "x_train=x_train.reshape(-1,28,28,1)\n",
        "x_test=x_test.reshape(-1,28,28,1)\n",
        "print(f\"Train shape: {x_train.shape}\")\n",
        "print(f\"Test shape: {x_test.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6cvhcTYHs64a",
        "outputId": "4118af47-9cc8-440c-a3ab-f70cb47a9681"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Train shape: (60000, 28, 28, 1)\n",
            "Test shape: (10000, 28, 28, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize=(8,8))\n",
        "for i in range(9):\n",
        "  plt.subplot(3,3,i+1)\n",
        "  plt.imshow(x_train[i].reshape(28,28),cmap='gray')\n",
        "  plt.title(f\"Label: {y_train[i]}\")\n",
        "  plt.axis('off')\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 675
        },
        "id": "Q4N62mMluPs8",
        "outputId": "71b68b74-9cc1-4856-eee3-dfb379a900d7"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 9 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "gc-bEFd7wzgu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "(x_train_c10,y_train_c10),(x_test_c10,y_test_c10) = tf.keras.datasets.cifar10.load_data()\n",
        "x_train_c10=x_train_c10/255.0\n",
        "x_test_c10=x_test_c10/255.0\n",
        "print(f\"CIFAR-10 train shape: {x_train_c10.shape}\")\n",
        "#print(f\"Train shape: {x_train.shape}\")\n",
        "#print(f\"Test shape: {x_test.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EqgwHyTQvjBg",
        "outputId": "3266f0b7-7978-4373-fa72-707891e34a1d"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n",
            "\u001b[1m170498071/170498071\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 0us/step\n",
            "CIFAR-10 train shape: (50000, 32, 32, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D,MaxPooling2D,Flatten,Dense,Dropout\n",
        "model=Sequential([\n",
        "Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1)),MaxPooling2D(2,2),\n",
        "\n",
        "Conv2D(64,(3,3),activation='relu'),\n",
        "MaxPooling2D((2,2)),\n",
        "Dropout(0.25),\n",
        "Flatten(),\n",
        "Dense(128,activation='relu'),\n",
        "Dropout(0.5),\n",
        "Dense(10,activation='softmax')\n",
        "])\n",
        "model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n",
        "model.summary()\n"
      ],
      "metadata": {
        "id": "Cw3kId74xUF-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "eebb264a-6db0-4395-c1b9-d30d53add41e"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:113: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1600\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │       \u001b[38;5;34m204,928\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │         \u001b[38;5;34m1,290\u001b[0m │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1600</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">204,928</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,290</span> │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m225,034\u001b[0m (879.04 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">225,034</span> (879.04 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m225,034\u001b[0m (879.04 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">225,034</span> (879.04 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "history=model.fit(x_train,y_train,epochs=5,batch_size=32,validation_split=0.2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IAoHF3sM32EP",
        "outputId": "1e8479a3-51e2-420c-e91b-e1e671edbe44"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m52s\u001b[0m 34ms/step - accuracy: 0.8439 - loss: 0.4859 - val_accuracy: 0.9812 - val_loss: 0.0617\n",
            "Epoch 2/5\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m72s\u001b[0m 27ms/step - accuracy: 0.9703 - loss: 0.0998 - val_accuracy: 0.9873 - val_loss: 0.0427\n",
            "Epoch 3/5\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m91s\u001b[0m 34ms/step - accuracy: 0.9777 - loss: 0.0775 - val_accuracy: 0.9887 - val_loss: 0.0388\n",
            "Epoch 4/5\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m93s\u001b[0m 41ms/step - accuracy: 0.9827 - loss: 0.0573 - val_accuracy: 0.9902 - val_loss: 0.0352\n",
            "Epoch 5/5\n",
            "\u001b[1m1500/1500\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 27ms/step - accuracy: 0.9853 - loss: 0.0499 - val_accuracy: 0.9892 - val_loss: 0.0431\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(history.history['accuracy'],label=\"Train\")\n",
        "plt.plot(history.history['val_accuracy'],label=\"Validation\")\n",
        "\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "uiGGu_cW4fYk",
        "outputId": "65d89466-993e-40db-acc0-0c073f87ae81"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_loss,test_acc=model.evaluate(x_test,y_test)\n",
        "print(f\"Test accuracy: {test_acc:.4f}\")\n",
        "y_pred=model.predict(x_test).argmax(axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Df8oqnvX91-M",
        "outputId": "6f0eff5a-e0e6-4098-db90-aea313b0b815"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 8ms/step - accuracy: 0.9858 - loss: 0.0407\n",
            "Test accuracy: 0.9882\n",
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 7ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.layers  import Dropout\n",
        "\n",
        "model=Sequential([\n",
        "Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1)),MaxPooling2D(2,2),\n",
        "\n",
        "Conv2D(64,(3,3),activation='relu'),\n",
        "MaxPooling2D((2,2)),\n",
        "Dropout(0.25),\n",
        "Flatten(),\n",
        "Dense(128,activation='relu'),\n",
        "Dropout(0.5),\n",
        "Dense(10,activation='softmax')\n",
        "])\n",
        "model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n",
        "model.summary()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 417
        },
        "id": "Yg6zfvZN_UxW",
        "outputId": "851a1284-139d-4fa8-d684-2c6d1faa3aa8"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential_1\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_3 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_3 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ flatten_1 (\u001b[38;5;33mFlatten\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1600\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │       \u001b[38;5;34m204,928\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_3 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │         \u001b[38;5;34m1,290\u001b[0m │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ flatten_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1600</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">204,928</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,290</span> │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m225,034\u001b[0m (879.04 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">225,034</span> (879.04 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m225,034\u001b[0m (879.04 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">225,034</span> (879.04 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "datagen=ImageDataGenerator(\n",
        "\n",
        "    rotation_range=15,\n",
        "    width_shift_range=0.1,\n",
        "    height_shift_range=0.1,\n",
        "\n",
        "    horizontal_flip=True,\n",
        ")\n",
        "datagen.fit(x_train_c10)\n"
      ],
      "metadata": {
        "id": "za-s_JwcCPuU"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.layers import BatchNormalization\n",
        "\n",
        "model=Sequential([\n",
        "\n",
        "Conv2D(32, (3,3), activation='relu', input_shape=(32,32,3)),\n",
        "\n",
        "BatchNormalization(),\n",
        "\n",
        "MaxPooling2D(2,2),\n",
        "\n",
        "Conv2D(64, (3,3), activation='relu'),\n",
        "\n",
        "MaxPooling2D(2,2),\n",
        "\n",
        "Conv2D(128, (3,3), activation= 'relu'),\n",
        "\n",
        "MaxPooling2D(2,2),\n",
        "\n",
        "Flatten(),\n",
        "\n",
        "Dense(256, activation= 'relu'),\n",
        "\n",
        "Dropout(0.5),\n",
        "\n",
        "Dense(10, activation= 'softmax')\n",
        "])\n",
        "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "model.fit(datagen.flow(x_train_c10,y_train_c10,batch_size=32),epochs=10,validation_data=(x_test_c10,y_test_c10))"
      ],
      "metadata": {
        "id": "IXDecDC8AAhe",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "34d2dbf5-781c-4e82-9d42-ab6195ba5126"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
            "  self._warn_if_super_not_called()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m115s\u001b[0m 72ms/step - accuracy: 0.3390 - loss: 1.7750 - val_accuracy: 0.4785 - val_loss: 1.4727\n",
            "Epoch 2/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m109s\u001b[0m 70ms/step - accuracy: 0.5293 - loss: 1.3271 - val_accuracy: 0.5235 - val_loss: 1.3296\n",
            "Epoch 3/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m149s\u001b[0m 74ms/step - accuracy: 0.5832 - loss: 1.1887 - val_accuracy: 0.5347 - val_loss: 1.3581\n",
            "Epoch 4/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m130s\u001b[0m 83ms/step - accuracy: 0.6159 - loss: 1.1002 - val_accuracy: 0.6595 - val_loss: 0.9778\n",
            "Epoch 5/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m135s\u001b[0m 87ms/step - accuracy: 0.6347 - loss: 1.0548 - val_accuracy: 0.6827 - val_loss: 0.9168\n",
            "Epoch 6/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m121s\u001b[0m 78ms/step - accuracy: 0.6497 - loss: 1.0095 - val_accuracy: 0.6709 - val_loss: 0.9588\n",
            "Epoch 7/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m130s\u001b[0m 70ms/step - accuracy: 0.6578 - loss: 0.9894 - val_accuracy: 0.6479 - val_loss: 1.0294\n",
            "Epoch 8/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m107s\u001b[0m 68ms/step - accuracy: 0.6693 - loss: 0.9521 - val_accuracy: 0.6048 - val_loss: 1.2393\n",
            "Epoch 9/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m143s\u001b[0m 69ms/step - accuracy: 0.6739 - loss: 0.9410 - val_accuracy: 0.6830 - val_loss: 0.9516\n",
            "Epoch 10/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m107s\u001b[0m 69ms/step - accuracy: 0.6842 - loss: 0.9154 - val_accuracy: 0.6165 - val_loss: 1.1261\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7bf7492dced0>"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix,classification_report\n",
        "import numpy as np\n",
        "y_pred_c10=model.predict(x_test_c10).argmax(axis=1)\n",
        "cm=confusion_matrix(y_test_c10,y_pred_c10)\n",
        "\n",
        "print(classification_report(y_test_c10,y_pred_c10))\n",
        "import seaborn as sns\n",
        "sns.heatmap(cm,annot=True,fmt='d')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('True')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 761
        },
        "id": "tCkJa5XzF7dX",
        "outputId": "90f7698e-982c-4296-d8eb-dfaad6d0c4bf"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 12ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.72      0.69      0.70      1000\n",
            "           1       0.70      0.88      0.78      1000\n",
            "           2       0.64      0.42      0.51      1000\n",
            "           3       0.54      0.37      0.44      1000\n",
            "           4       0.65      0.47      0.55      1000\n",
            "           5       0.91      0.24      0.38      1000\n",
            "           6       0.44      0.91      0.59      1000\n",
            "           7       0.75      0.66      0.70      1000\n",
            "           8       0.81      0.64      0.72      1000\n",
            "           9       0.52      0.89      0.66      1000\n",
            "\n",
            "    accuracy                           0.62     10000\n",
            "   macro avg       0.67      0.62      0.60     10000\n",
            "weighted avg       0.67      0.62      0.60     10000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle datasets download -d tongpython/cat-and-dog"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P6Sj89tRJ4bO",
        "outputId": "2cfde60b-23fc-4f77-95aa-14b54af388ac"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset URL: https://www.kaggle.com/datasets/tongpython/cat-and-dog\n",
            "License(s): CC0-1.0\n",
            "Downloading cat-and-dog.zip to /content\n",
            " 91% 199M/218M [00:00<00:00, 254MB/s]\n",
            "100% 218M/218M [00:00<00:00, 281MB/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import zipfile\n",
        "with zipfile.ZipFile(\"/content/cat-and-dog.zip\",\"r\") as zip_ref:\n",
        "  zip_ref.extractall(\"/content/dogs-vs-cats\")"
      ],
      "metadata": {
        "id": "AhAa615pKbIf"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "datagen=ImageDataGenerator(rescale=1./255,validation_split=0.2)\n",
        "train_generator=datagen.flow_from_directory(\n",
        "    \"/content/dogs-vs-cats\",target_size=(224,224),batch_size=32,class_mode='binary',subset='training')\n",
        "val_generator=datagen.flow_from_directory(\n",
        "    \"/content/dogs-vs-cats\",target_size=(224,224),batch_size=32,class_mode='binary',subset='validation')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3NWRzFoNbqPj",
        "outputId": "47da1d61-1c8e-4b75-9957-f06886effa18"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 8023 images belonging to 2 classes.\n",
            "Found 2005 images belonging to 2 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.applications import MobileNetV2\n",
        "from tensorflow.keras.layers import GlobalAveragePooling2D\n",
        "from tensorflow.keras.models import Sequential\n",
        "\n",
        "base_model=MobileNetV2(weights='imagenet',include_top=False,input_shape=(224,224,3))\n",
        "base_model.trainable=False\n",
        "model=Sequential([\n",
        "base_model,\n",
        "GlobalAveragePooling2D(),\n",
        "Dense(1,activation='sigmoid'),Dense(1,activation=\"relu\")\n",
        "])\n",
        "model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n",
        "model.fit(train_generator,epochs=5,validation_data=val_generator)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pzd5J5e5cdzs",
        "outputId": "ccb3ae2f-c812-417e-86da-d0e61313254d"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_224_no_top.h5\n",
            "\u001b[1m9406464/9406464\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
            "  self._warn_if_super_not_called()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m379s\u001b[0m 1s/step - accuracy: 0.7117 - loss: 0.6606 - val_accuracy: 0.7781 - val_loss: 0.5632\n",
            "Epoch 2/5\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m370s\u001b[0m 1s/step - accuracy: 0.7514 - loss: 0.5799 - val_accuracy: 0.7915 - val_loss: 0.5299\n",
            "Epoch 3/5\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m375s\u001b[0m 1s/step - accuracy: 0.8036 - loss: 0.5087 - val_accuracy: 0.7960 - val_loss: 0.5251\n",
            "Epoch 4/5\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m386s\u001b[0m 1s/step - accuracy: 0.7980 - loss: 0.5063 - val_accuracy: 0.7970 - val_loss: 0.5228\n",
            "Epoch 5/5\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m390s\u001b[0m 1s/step - accuracy: 0.7927 - loss: 0.5128 - val_accuracy: 0.7985 - val_loss: 0.5358\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7bf74bc8ee90>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "base_model.trainable=True\n",
        "model.compile(optimizer=tf.keras.optimizers.Adam(1e-5),loss='binary_crossentropy',metrics=['accuracy'])\n",
        "model.fit(train_generator,epochs=3,validation_data=val_generator)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TS08flWIeGCv",
        "outputId": "54128363-90ff-4855-d8b7-c7b49050b5a7"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/3\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1515s\u001b[0m 6s/step - accuracy: 0.7912 - loss: 0.5344 - val_accuracy: 0.7985 - val_loss: 0.5369\n",
            "Epoch 2/3\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1538s\u001b[0m 6s/step - accuracy: 0.8005 - loss: 0.4832 - val_accuracy: 0.7985 - val_loss: 0.5282\n",
            "Epoch 3/3\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1491s\u001b[0m 6s/step - accuracy: 0.8014 - loss: 0.4552 - val_accuracy: 0.7980 - val_loss: 0.5245\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7bf6daeee590>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "ICwlp90zrvss"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.save(\"mobilenet_cats_dogs.h5\")\n",
        "#to load\n",
        "import tensorflow as tf\n",
        "\n",
        "loaded_model=tf.keras.models.load_model(\"mobilenet_cats_dogs.h5\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ix9Wh3xgfs1g",
        "outputId": "5c3e8171-9cf6-434b-a363-314be4f569cc"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n",
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import roc_curve, auc\n",
        "\n",
        "y_pred_proba=loaded_model.predict(val_generator)\n",
        "fpr,tpr, _ =roc_curve(val_generator.classes,y_pred_proba)\n",
        "roc_auc=auc(fpr,tpr)\n",
        "\n",
        "plt.plot(fpr,tpr,label=f\"ROC Curve (AUC ={roc_auc:.2f})\")\n",
        "plt.plot([0,1],[0,1],\"k--\")\n",
        "\n",
        "plt.xlabel(\"False positive rate\")\n",
        "plt.ylabel(\"True positive rate\")\n",
        "plt.title(\"ROC curve\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "_AcTfLuggJYD",
        "outputId": "688141cd-ff71-4e50-c7eb-d07487500fc1"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m66s\u001b[0m 1s/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded=files.upload() #upload eg \"mycat.jpg\"\n",
        "from tensorflow.keras.preprocessing import image\n",
        "from tensorflow.keras.applications.mobilenet_v2 import preprocess_input\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "img_path=\"images.jpg\" #Replace with filename\n",
        "img=image.load_img(img_path,target_size=(224,224))\n",
        "img_array=image.img_to_array(img)\n",
        "img_array=np.expand_dims(img_array,axis=0)\n",
        "img_array=preprocess_input(img_array)\n",
        "prediction=loaded_model.predict(img_array)\n",
        "print(\"Prediction class:\",\"Dog\" if prediction[0][0] > 0.5 else \"Cat\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 108
        },
        "id": "3l6FGUFahFQQ",
        "outputId": "e3b801d2-76e4-4f0e-c1a6-530776153f07"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-b7d5641f-f694-43ae-a4d8-3e54f6db6a9f\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-b7d5641f-f694-43ae-a4d8-3e54f6db6a9f\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving images.jpg to images (1).jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step\n",
            "Prediction class: Dog\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "datasets=[\"MNIST\",'CIFAR-10',\"Cats vs. Dogs\"]\n",
        "accuracies=[0.98,0.75,0.90]\n",
        "plt.bar(datasets,accuracies, color=[\"#36A2EB\",\"#FF6384\",\"#4BC0C0\"])\n",
        "plt.xlabel(\"Datasets\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "plt.title(\"Model Accuracy Across Datasets\")\n",
        "plt.ylim(0,1)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "3bXAkJnYQtEv",
        "outputId": "f58b656c-6940-4c2a-81d2-5d17b084b4d3"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "6HlPstu_S2qW"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}